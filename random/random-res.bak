#lang racket

(define (make-prob q1 q2 q3 q4)
  (list q1 q2 q3 q4))
(define (scale-prob probs scale)
  (make-prob
   (* scale (get-q1 probs))
   (* scale (get-q2 probs))
   (* scale (get-q3 probs))
   (* scale (get-q4 probs)))
  )
(define n-scale 0.6)
(define (get-q1 prob)
  (car prob))
(define (get-q2 prob)
  (cadr prob))
(define (get-q3 prob)
  (caddr prob))
(define (get-q4 prob)
  (cadddr prob))
(define (get-prob q prob)
  (case q
    ('q1 (get-q1 prob))
    ('q2 (get-q2 prob))
    ('q3 (get-q3 prob))
    ('q4 (get-q4 prob))
    )
  )

(define (get-quad posx posy dim)
  (let ((x (+ (get-x dim) (/ (get-w dim) 2)))
        (y (+ (get-y dim) (/ (get-h dim) 2))))
        (cond ((and (>= posx x) (<= posy y))
               'q1)
              ((and (<= posx x) (<= posy y))
               'q2)
              ((and (<= posx x) (>= posy y))
               'q3)
              (else 'q4))
    )
  )             

(define (make-dim x y w h)
  (list x y w h))
(define (get-x dim)
  (car dim))
(define (get-y dim)
  (cadr dim))
(define (get-h dim)
  (cadddr dim))
(define (get-w dim)
  (caddr dim))

